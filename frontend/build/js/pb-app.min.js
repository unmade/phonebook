!function(){"use strict";angular.module("pbApp",["ngRoute","ngResource","ngMessages","ngMaterial","infinite-scroll","pbApp.routes","pbApp.layout","pbApp.employees","pbApp.companies","pbApp.feedback","pbApp.utils"]),angular.module("pbApp.routes",[])}();
!function(){"use strict";angular.module("pbApp.companies",["ngResource"])}();
!function(){"use strict";angular.module("pbApp.employees",["ngResource","pbApp.layout"])}();
!function(){"use strict";angular.module("pbApp.feedback",["ngResource"])}();
!function(){"use strict";angular.module("pbApp.layout",[])}();
!function(){"use strict";angular.module("pbApp.utils",[])}();
!function(){"use strict";function e(e,t,r){e.defaults.xsrfCookieName="csrftoken",e.defaults.xsrfHeaderName="X-CSRFToken",t.defaults.stripTrailingSlashes=!1;var a=r.extendPalette("blue",{400:"4688f1",500:"4688f1",600:"4688f1"});r.definePalette("myBlue",a),r.theme("default").primaryPalette("myBlue").accentPalette("red")}angular.module("pbApp").config(e),e.$inject=["$httpProvider","$resourceProvider","$mdThemingProvider"]}();
!function(){"use strict";function e(e){e.when("/companies",{templateUrl:"/static/partials/companies/company-list.html",controller:"CompanyListCtrl",controllerAs:"ctrl"}).when("/employees",{templateUrl:"/static/partials/employees/employee-list.html",controller:"EmployeeListCtrl",controllerAs:"ctrl"}).when("/feedback",{templateUrl:"/static/partials/feedback/feedbacks.html",controller:"FeedbackListCtrl",controllerAs:"ctrl"}).otherwise({redirectTo:"/employees"})}angular.module("pbApp.routes").config(e),e.$inject=["$routeProvider"]}();
!function(){"use strict";function e(e){return e("companies/api/company/:id",{},{query:{method:"GET",isArray:!1}})}function r(e){return e("companies/api/center/:id",{},{query:{method:"GET",isArray:!1}})}function i(e){return e("companies/api/division/:id",{},{query:{method:"GET",isArray:!1}})}angular.module("pbApp.companies").factory("companyService",["$resource",e]).factory("centerService",["$resource",r]).factory("divisionService",["$resource",i]),e.$inject=["$resourse"],r.$inject=["$resourse"],i.$inject=["$resourse"]}();
!function(){"use strict";function e(){return{restrict:"AE",templateUrl:"company-detail.directive.html",scope:{company:"=company"}}}angular.module("pbApp.companies").directive("companyDetail",e)}();
!function(){"use strict";function e(e,n,i,o,t){function r(i){var o=4;if(!i)return s.companies.results.slice(0,o);var r=e.defer(),a=n("englishCharsToRussian")(i);return t.query({search:a,limit:o,offset:0},function(e,n){r.resolve(e.results)}),r.promise}function a(){i("company-detail-right").close()}function c(e){e&&(s.company=e,i("company-detail-right").toggle())}var s=this;s.companies=new o(t,{limit:40,offset:0}),s.companySearch=r,s.closeCompanyDetail=a,s.openCompanyDetail=c}angular.module("pbApp.companies").controller("CompanyListCtrl",e),e.$inject=["$q","$filter","$mdSidenav","Scroll","companyService"]}();
!function(){"use strict";function e(e,n,l,s,t,i,o,c){function r(){h.selectedCenter=null,h.selectedDivision=null,h.employees=new t(s,{company:h.selectedCompany,search:h.searchText||null}),h.employees.nextPage()}function a(){h.selectedDivision=null,h.employees=new t(s,{company:h.selectedCompany,center:h.selectedCenter,search:h.searchText||null}),h.employees.nextPage()}function u(){l("employee-detail-right").close()}function p(){h.employees=new t(s,{company:h.selectedCompany,center:h.selectedCenter,division:h.selectedDivision,search:h.searchText||null}),h.employees.nextPage()}function d(l){var t=8;if(!l)return h.employees.results.slice(0,t);var i=e.defer(),o=n("englishCharsToRussian")(l);return s.query({search:o,limit:t,offset:0},function(e,n){i.resolve(e.results)}),i.promise}function m(){return h.companies||i.query(function(e){h.companies=e})}function y(){return h.centers&&h.centers.results.length&&h.centers.results[0].company==h.selectedCompany?void 0:o.query({company:h.selectedCompany},function(e){h.centers=e})}function v(){return h.divisions&&h.divisions.results.length&&h.divisions.results[0].center==h.selectedCenter?void 0:c.query({center:h.selectedCenter},function(e){h.divisions=e})}function f(e){e&&(h.employee=e,l("employee-detail-right").toggle())}function C(e){h.selectedCompany=null,h.selectedCenter=null,h.selectedDivision=null,h.employees=new t(s,{search:e}),h.employees.nextPage()}var h=this;h.employees=new t(s),h.companies=null,h.centers=null,h.divisions=null,h.selectedCompany=null,h.selectedCenter=null,h.selectedDivision=null,h.companyChanged=r,h.centerChanged=a,h.closeEmployeeDetail=u,h.divisionChanged=p,h.employeeSearch=d,h.loadCompanies=m,h.loadCenters=y,h.loadDivisions=v,h.openEmployeeDetail=f,h.search=C}angular.module("pbApp.employees").controller("EmployeeListCtrl",e),e.$inject=["$q","$filter","$mdSidenav","employeeService","Scroll","companyService","centerService","divisionService"]}();
!function(){"use strict";function n(){return function(n){var r=function(n){return n?n:""};return(r(n.surname)+" "+r(n.firstname)+" "+r(n.patronymic)).trim()}}angular.module("pbApp.employees").filter("toFullname",n)}();
!function(){"use strict";function e(e){return e("employees/api/employee/:id",{},{query:{method:"GET",isArray:!1}})}angular.module("pbApp.employees").factory("employeeService",e),e.$inject=["$resource"]}();
!function(){"use strict";function e(){return function(e){switch(e){case"DF":return"";case"PR":return"В процессе";case"NW":return"Новое";case"SL":return"Выполнено";case"RJ":return"Не будет выполнено";default:return""}}}angular.module("pbApp.feedback").filter("getStatusName",e)}();
!function(){"use strict";function e(e){return e("feedback/api/feedback/",{},{query:{method:"GET",isArray:!1}})}angular.module("pbApp.feedback").factory("feedbackService",e),e.$inject=["$resource"]}();
!function(){"use strict";function e(e,c){var t=this;t.feedbacks=new e(c)}angular.module("pbApp.feedback").controller("FeedbackListCtrl",e),e.$inject=["Scroll","feedbackService"]}();
!function(){"use strict";function e(){return{bindToController:!0,controller:t,controllerAs:"newFeedback",replace:!0,restrict:"AE",scope:{buttonClass:"@buttonClass"},templateUrl:"new-feedback.directive.html"}}function t(e,t,o,c){function i(e){e.sender&&e.text&&c.save({sender:e.sender,text:e.text},function(e){r()},function(e){l()})}function l(){o.show(o.simple().textContent("Отправка не удалась!").position("top right").hideDelay(3e3))}function r(){o.show(o.simple().textContent("Ваше сообщение принято!").position("top right").hideDelay(3e3))}function s(e){t.show({templateUrl:"new-feedback-dialog.tmpl.html",targetEvent:e,clickOutsideToClose:!1,controller:n,controllerAs:"nfdCtrl",fullscreen:!0}).then(function(e){i(e)})}var a=this;a.showNewFeedbackDialog=s}function n(e){function t(){e.cancel()}function n(){e.hide(o.feedback)}var o=this;o.feedback={sender:null,text:null},o.cancel=t,o.send=n}angular.module("pbApp.feedback").directive("newFeedback",e),t.$inject=["$scope","$mdDialog","$mdToast","feedbackService"],n.$inject=["$mdDialog"]}();
!function(){"use strict";function e(){return{controller:n,controllerAs:"menu",restrict:"AE",replace:!0,templateUrl:"menu.directive.html"}}function n(e){function n(){e("left-menu").close()}function t(){e("left-menu").toggle()}var c=this;c.pages=[{url:"employees",name:"Сотрудники",icon:"contact_phone"},{url:"companies",name:"Организации",icon:"business"},{url:"feedback",name:"Обратная связь",icon:"feedback"}],c.closeMenu=n,c.openMenu=t}angular.module("pbApp.layout").directive("mainMenu",e),e.$inject=[],n.$inject=["$mdSidenav"]}();
!function(){"use strict";function e(){return function(e){if(void 0!==e&&null!==e){var t=Date.parse(new Date),r=Date.parse(e);return new Date(t-r).getFullYear()-1970}}}function t(){return function(e){if(11===e||12===e||13===e||14===e)return e+" лет";switch(e%10){case 1:return e+" год";case 2:case 3:case 4:return e+" года";default:return e+" лет"}}}angular.module("pbApp.utils").filter("age",e).filter("agePlural",t)}();
!function(){"use strict";function n(){return function(n){var u,r={q:"й",w:"ц",e:"у",r:"к",t:"е",y:"н",u:"г",i:"ш",o:"щ",p:"з","[":"х","{":"х","]":"ъ","}":"ъ",a:"ф",s:"ы",d:"в",f:"а",g:"п",h:"р",j:"о",k:"л",l:"д",";":"ж",":":"ж","'":"э",'"':"э","\\":"ё","`":"ё","|":"ё",z:"я",x:"ч",c:"с",v:"м",b:"и",n:"т",m:"ь",",":"б","<":"б",".":"ю",">":"ю"},t=n.toLowerCase(),s=[];for(u=0;u<t.length;u+=1)r[t[u]]?s.push(r[t[u]]):s.push(t[u]);return s.join("")}}angular.module("pbApp.utils").filter("englishCharsToRussian",n)}();
!function(){"use strict";function e(){return function(e){function c(e){return 4==e.length?e.slice(0,2)+"-"+e.slice(2):7==e.length?e.slice(0,3)+"-"+e.slice(3,5)+"-"+e.slice(5,7):e}if(!e)return"";var i,r,t,s=e.toString().replace(/[()-\s]+/g,"");switch(s.length){case 4:case 7:return c(s);case 10:i="",r=s.slice(0,3),t=c(s.slice(3));break;case 11:i=s[0],r=s.slice(1,4),t=c(s.slice(4));break;case 12:i=s.slice(0,2),r=s.slice(2,5),t=c(s.slice(5));break;default:return e}return(i+" ("+r+") "+t).trim()}}angular.module("pbApp.utils").filter("formatPhone",e)}();
!function(){"use strict";function n(n,t,e,o){function i(n){var t=$("<iframe style='display: none'></iframe>").appendTo("body")[0];t.contentWindow.printAndRemove=function(){t.contentWindow.print(),$(t).remove()};var e="<!doctype html>  <html>    <body onload='printAndRemove();'>"+n+"    </body></html>",o=t.contentWindow.document.open("text/html","replace");o.write(e),o.close()}function r(r,c){e.get(r).success(function(r){var d=n.$new();angular.extend(d,c);var p=t($("<div>"+r+"</div>"))(d),u=function(){d.$$phase||e.pendingRequests.length?o(u):(i(p.html()),d.$destroy())};u()})}return{print:r}}angular.module("pbApp.utils").factory("printerService",n),n.$inject=["$rootScope","$compile","$http","$timeout"]}();
!function(){"use strict";function t(){var t=function(t,s){this.results=[],this.after=void 0,this.params=angular.copy(s)||{},this.params.offset=s&&s.offset?s.offset:0,this.params.limit=s&&s.limit?s.limit:20,this.busy=!1,this.service=t};return t.prototype.nextPage=function(){this.busy||null!==this.after&&(this.busy=!0,this.service.query(this.params,function(t){this.results=this.results.concat(t.results),this.params.offset+=this.params.limit,this.after=t.next,this.busy=!1}.bind(this)))},t}angular.module("pbApp.utils").factory("Scroll",t)}();
!function(){"use strict";function e(){return{restrict:"AE",templateUrl:"directives/employee-detail.directive.html",scope:{employee:"=employee"}}}angular.module("pbApp.employees").directive("employeeDetail",e)}();
!function(){"use strict";function e(){return{restrict:"AE",templateUrl:"directives/employee-list-item.directive.html",scope:{employee:"=employee"}}}angular.module("pbApp.employees").directive("employeeListItem",e)}();
!function(){"use strict";function e(){return{restrict:"AE",controller:t,controllerAs:"printCtrl",templateUrl:"directives/employee-print.directive.html"}}function t(e){function t(t){e.show({controller:l,controllerAs:"printDialogCtrl",templateUrl:"print-employee-dialog.tmpl.html",parent:angular.element(document.body),targetEvent:t,clickOutsideToClose:!1,fullscreen:!0})}var r=this;r.showPrintDialog=t}function l(e,t,l,r,n,i){function o(l){var r=8;if(!l)return c.employees.results.slice(0,r);var i=e.defer(),o=t("englishCharsToRussian")(l);return n.query({search:o,limit:r,offset:0},function(e,t){i.resolve(e.results)}),i.promise}function s(){l.hide()}function a(){c.busy=!0;var e,t=function(t){e=t.results,i.print("/static/partials/utils/print-template.html",{employees:e,sortBy:c.sortBy.split(",")}),c.busy=!1};"all"===c.type&&n.query({limit:99999999},t),"by_company"===c.type&&n.query({limit:99999999,company:c.selectedCompany},t),"custom"===c.type&&t({results:c.selectedEmployees})}var c=this;c.busy=!1,c.companies=r.query(),c.type="all",c.selectedEmployees=[],c.selectedCompany=null,c.selectedItem=null,c.searchText=null,c.sortBy=null,c.sortOptions=[{name:"По фамилии",value:"surname, firstname, patronymic"},{name:"По организации",value:"company.name"},{name:"По организации, затем по фамилии",value:"company.name, surname"}],c.employeeSearch=o,c.hide=s,c.print=a}angular.module("pbApp.employees").directive("printEmployees",e),t.$inject=["$mdDialog"],l.$inject=["$q","$filter","$mdDialog","companyService","employeeService","printerService"]}();
angular.module("pbApp.companies").run(["$templateCache",function(n){n.put("company-detail.directive.html",'<md-content layout="column">\n    <div class="company-detail_logo">\n        <img ng-src="{{ company.logo }}" />\n    </div>\n\n    <div class="company-detail_name">\n        <h3 class="md-title">{{ company.name }}</h3>\n        <p class="md-caption" ng-if="company.ceo">{{ company.ceo.position }}: {{ company.ceo | toFullname }}</p>\n    </div>\n\n    <div class="md-whiteframe-4dp">\n        <md-list>\n            <md-list-item class="md-1-line" ng-show="company.address">\n                <md-icon>place</md-icon>\n                <p>{{ company.address }}</p>\n            </md-list-item>\n            <md-list-item class="md-2-line"\n                          ng-repeat="phone in company.phones">\n                <md-icon ng-if="$first">phone</md-icon>\n                <div class="md-list-item-text" ng-class="{\'md-offset\': !$first}">\n                    <h3>{{ phone.number }}</h3>\n                    <p>\n                        {{ phone.category }}\n                        <span ng-show="phone.comment"> ({{ phone.comment }})</span>\n                    </p>\n                </div>\n            </md-list-item>\n            <md-list-item class="md-2-line"\n                          ng-repeat="email in company.emails">\n                <md-icon ng-if="$first">email</md-icon>\n                <div class="md-list-item-text" ng-class="{\'md-offset\': !$first}">\n                    <h3>{{ email.email }}</h3>\n                    <p>\n                        {{ email.category }}\n                        <span ng-show="email.comment"> ({{ email.comment }})</span>\n                    </p>\n                </div>\n            </md-list-item>\n        </md-list>\n\n        <md-divider ng-show="company.full_name || company.comment"></md-divider>\n\n        <md-list>\n            <md-list-item class="md-1-line" ng-show="company.full_name">\n                <md-icon>description</md-icon>\n                <p>{{ company.full_name }}</p>\n            </md-list-item>\n\n            <md-list-item class="md-1-line" ng-show="company.comment">\n                <md-icon>info</md-icon>\n                <p>{{ company.comment }}</p>\n            </md-list-item>\n        </md-list>\n\n    </div>\n</md-content>\n')}]);
angular.module("pbApp.employees").run(["$templateCache",function(e){e.put("directives/employee-detail.directive.html",'<md-content layout="column">\n    <div layout="row" layout-align="center center" class="employee-detail_name" layout-padding>\n        <div layout="column" layout-align="start start" layout-padding>\n            <h3 class="md-headline">\n                {{ employee.surname }}\n                <span class="md-title">{{ employee.firstname }} {{ employee.patronymic }}</span>\n            </h3>\n            <p class="md-body-1" ng-hide="employee.is_retired">{{ employee.position }}</p>\n            <p class="md-body-1" ng-show="employee.is_retired">\n                Уволился (На момент увольнения: {{ employee.position }})\n            </p>\n            <div>\n                <p class="md-caption">\n                    {{ employee.company.name }}\n                    <md-icon ng-show="employee.center.name" class="pb-text-pale-white">chevron_right</md-icon>\n\n                    {{ employee.center.number }}\n                    <span ng-show="employee.center.number && employee.center.name">&nbsp-&nbsp</span>\n                    {{ employee.center.name }}\n\n                    <md-icon ng-show="employee.division.name" class="pb-text-pale-white">chevron_right</md-icon>\n\n                    {{ employee.division.number }}\n                    <span ng-show="employee.division.number && employee.division.name">&nbsp-&nbsp</span>\n                    {{ employee.division.name }}\n                    &nbsp\n                </p>\n                <md-divider ng-if="employee.place"></md-divier>\n                <p>{{ employee.place }}</p>\n            </div>\n        </div>\n    </div>\n\n    <div layout-padding class="md-whiteframe-z2">\n        <md-list ng-if="employee.phones.length || employee.emails.length">\n            <md-list-item class="md-2-line" ng-repeat="phone in employee.phones">\n                <md-icon ng-if="$first">phone</md-icon>\n                <div class="md-list-item-text" ng-class="{\'md-offset\': !$first}">\n                    <h4 >{{ phone.number | formatPhone }}</h4>\n                    <p>\n                        {{ phone.category }}\n                        <span ng-show="phone.comment"> ({{ phone.comment }})</span>\n                    </p>\n                </div>\n            </md-list-item>\n            <md-list-item class="md-2-line" ng-repeat="email in employee.emails">\n                <md-icon ng-if="$first">email</md-icon>\n                <div class="md-list-item-text" ng-class="{\'md-offset\': !$first}">\n                    <h4 >{{ email.email }}</h4>\n                    <p>\n                        {{ email.category }}\n                        <span ng-show="email.comment"> ({{ email.comment }})</span>\n                    </p>\n                </div>\n            </md-list-item>\n        </md-list>\n\n        <md-divider ng-show="employee.birthday || employee.secretary.length || employee.comment"></md-divider>\n\n        <md-list>\n            <md-list-item class="md-1-line" ng-show="employee.birthday">\n                <md-icon class="pb-avatar-icon">cake</md-icon>\n                <p>\n                    {{ employee.birthday | date:\'dd.MM.yyyy\' }}\n                    ({{ employee.birthday | age | agePlural }})\n                </p>\n            </md-list-item>\n\n            <md-list-item class="md-1-line"\n                          ng-repeat="secretary in employee.secretary"\n                          ng-show="employee.secretary.length">\n                <md-icon>assistant</md-icon>\n                <p>\n                    {{ secretary.surname }}\n                    {{ secretary.firstname }}\n                    {{ secretary.patronymic }}\n                </p>\n            </md-list-item>\n\n            <md-list-item class="md-1-line" ng-show="employee.comment">\n                <md-icon>info</md-icon>\n                <p>{{ employee.comment }}</p>\n            </md-list-item>\n        </md-list>\n\n    </div>\n</md-content>\n'),e.put("directives/employee-list-item.directive.html",'<div layout="row" layout-padding layout-align="start center" class="employee-list-item">\n    <div flex="33" flex-xs="40" flex-sm="25">\n        <h4 class="md-subhead">{{ employee.surname }} {{ employee.firstname }} {{ employee.patronymic }}</h4>\n        <p class="md-caption pb-text-muted" ng-hide="employee.is_retired">{{ employee.position }}</p>\n        <p class="md-caption pb-text-muted" ng-show="employee.is_retired">\n            Уволился (На момент увольнения: {{ employee.position }})\n        </p>\n    </div>\n\n    <div layout="row" layout-xs="column" class="employee-list-item_contacts" flex="35" flex-xs="55" flex-sm="50">\n        <md-list flex>\n            <md-list-item ng-repeat="phone in employee.phones" ng-show="$even">\n                <md-tooltip md-direction="left">{{ phone.category }}</md-tooltip>\n                <p>{{ phone.number | formatPhone }}</p>\n            </md-list-item>\n        </md-list>\n        <md-list flex>\n            <md-list-item ng-repeat="phone in employee.phones" ng-show="$odd">\n                <md-tooltip md-direction="left">{{ phone.category }}</md-tooltip>\n                <p>{{ phone.number | formatPhone }}</p>\n            </md-list-item>\n        </md-list>\n        <md-list hide-gt-xs>\n            <md-list-item ng-repeat="email in employee.emails">\n                <md-tooltip md-direction="left">{{ email.category }}</md-tooltip>\n                <p>{{ email.email }}</p>\n            </md-list-item>\n        </md-list>\n    </div>\n\n    <div class="employee-list-item_contacts" hide-xs>\n        <md-list>\n            <md-list-item ng-repeat="email in employee.emails">\n                <md-tooltip md-direction="left">{{ email.category }}</md-tooltip>\n                <p>{{ email.email }}</p>\n            </md-list-item>\n        </md-list>\n    </div>\n    <span flex></span>\n\n    <div class="employee-list-item_company" ng-show="employee.company">\n        <md-tooltip>\n            {{ employee.company.name }}\n        </md-tooltip>\n        <img ng-src="{{ employee.company.logo }}" alt="{{ employee.company.name }}" />\n        <p class="pb-text-muted" hide-xs hide-sm>\n            {{ employee.center.number }}\n            <md-icon ng-show="employee.division">chevron_right</md-icon>\n            {{ employee.division.number }}\n        </p>\n    </div>\n</div>\n'),e.put("directives/employee-print.directive.html",'<div>\n\n<md-button class="md-button md-icon-button">\n    <md-icon ng-click="printCtrl.showPrintDialog($event)">print</md-icon>\n</md-button>\n\n<script type="text/ng-template" id="print-employee-dialog.tmpl.html">\n\n    <md-dialog aria-label="Print Employees" layout="column" class="pb-dialog">\n        <md-dialog-content flex layout-padding>\n            <div layout="row">\n                <h1 class="md-title">Печать сотрудников</h1>\n                <span flex></span>\n                <md-button class="md-icon-button" ng-click="printDialogCtrl.hide()">\n                    <md-icon>close</md-icon>\n                </md-button>\n            </div>\n\n            <h2 class="md-subhead">Каких сотрудников вывести на печать?</h2>\n            <div class="pb-print-dialog_type">\n                <md-radio-group ng-model="printDialogCtrl.type">\n                      <md-radio-button value="all">Всех</md-radio-button>\n                      <md-radio-button value="custom">Выбрать вручную</md-radio-button>\n                      <md-radio-button value="by_company">По предриятию</md-radio-button>\n                </md-radio-group>\n            </div>\n\n\n            <div>\n                <h2 class="md-subhead">Выберите порядок сортировки</h2>\n                <md-select ng-model="printDialogCtrl.sortBy" placeholder="Порядок сортировки"\n                           class="pb-print-dialog_search" aria-label="Select Order">\n                    <md-option ng-repeat="sortOption in printDialogCtrl.sortOptions"\n                               value="{{ sortOption.value }}" selected="sortOption.selected">\n                        {{ sortOption.name }}\n                    </md-option>\n                </md-select>\n            </div>\n\n            <div ng-show="printDialogCtrl.type === \'custom\'">\n                <h2 class="md-subhead">Выберите сотрудников</h2>\n                <md-chips ng-model="printDialogCtrl.selectedEmployees" md-autocomplete-snap\n                          md-require-match="true" class="pb-print-dialog_search">\n                  <md-autocomplete\n                      md-autofocus\n                      md-selected-item="printDialogCtrl.selectedItem"\n                      md-search-text="printDialogCtrl.searchText"\n                      md-items="item in printDialogCtrl.employeeSearch(printDialogCtrl.searchText)"\n                      placeholder="Имя сотрудника"\n                      secondary-placeholder="+Сотрудник"\n                      md-menu-class="autocomplete-custom-template">\n                      <md-item-template >\n                          <span class="pb-float-left" style="width: 400px;">\n                              <span class="item-title">\n                                  <span>{{ item | toFullname }}</span>\n                              </span>\n                              <span class="item-metadata">\n                                  <span class="item-metastat pb-text-muted">\n                                      {{ item.position }}\n                                  </span>\n                              </span>\n                          </span>\n                      </md-item-template>\n                      <md-not-found>\n                          Сотрудник "{{ printDialogCtrl.searchText }}" не найден.\n                      </md-not-found>\n                  </md-autocomplete>\n                  <md-chip-template>\n                    <span>\n                      <strong>{{ $chip.surname }}</strong>\n                    </span>\n                  </md-chip-template>\n                </md-chips>\n            </div>\n\n            <div ng-show="printDialogCtrl.type === \'by_company\'">\n                <h2 class="md-subhead">Предприятия</h2>\n                <md-select ng-model="printDialogCtrl.selectedCompany" placeholder="Предприятия"\n                           class="pb-print-dialog_search" aria-label="Select Company">\n                    <md-option ng-repeat="company in printDialogCtrl.companies.results" value="{{ company.id }}">\n                        {{ company.name }}\n                    </md-option>\n                </md-select>\n            </div>\n        </md-dialog-content>\n\n        <md-dialog-actions layout-padding>\n            <md-progress-circular md-mode="indeterminate"\n                                  md-diameter="40"\n                                  ng-show="printDialogCtrl.busy">\n            </md-progress-circular>\n            <md-button ng-click="printDialogCtrl.hide()"\n                       ng-disabled="printDialogCtrl.busy"\n                       class="md-raised"\n                       aria-label="Cancel">\n                Отмена\n            </md-button>\n            <md-button class="md-raised md-primary"\n                       aria-label="Print"\n                       ng-click="printDialogCtrl.print()"\n                       ng-disabled="printDialogCtrl.type === \'custom\' && !printDialogCtrl.selectedEmployees.length\n                                    || printDialogCtrl.type === \'by_company\' && !printDialogCtrl.selectedCompany\n                                    || printDialogCtrl.busy">\n                Печать\n            </md-button>\n        </md-dialog-action>\n\n    </md-dialog>\n\n</script>\n\n</div>\n')}]);
angular.module("pbApp.feedback").run(["$templateCache",function(n){n.put("new-feedback.directive.html",'<div>\n\n<md-button class="{{ newFeedback.buttonClass }}" aria-label="Add"\n           ng-click="newFeedback.showNewFeedbackDialog($event)">\n    <md-icon>create</md-icon>\n    <md-tooltip>Новое сообщение</md-tooltip>\n</md-button>\n\n<script type="text/ng-template" id="new-feedback-dialog.tmpl.html">\n    <md-dialog aria-label="New Feedback" layout="column" class="pb-dialog">\n        <md-dialog-content flex>\n            <form name="newFeedbackForm" layout="column" layout-padding>\n                <div layout="row" layout-padding>\n                    <h1 class="md-title">Обратная связь</h1>\n                    <span flex></span>\n                    <md-button class="md-icon-button" ng-click="nfdCtrl.cancel()">\n                        <md-icon>close</md-icon>\n                    </md-button>\n                </div>\n\n                <md-input-container class="md-block">\n                    <label>Представьтесь</label>\n                    <input ng-model="nfdCtrl.feedback.sender"\n                           name="sender"\n                           md-maxlength="50"\n                           required\n                           autofocus="true">\n                    <div class="pb-input-hint">Введите Вашу фамилию и инициалы</div>\n                    <div ng-messages="newFeedbackForm.sender.$error">\n                        <div ng-message="required">Необходимо указать <b>свою</b> фамилию.</div>\n                        <div ng-message="md-maxlength">Убедитесь, что в этом поле не больше 50 символов</div>\n                    </div>\n                </md-input-container>\n\n                <md-input-container class="md-block" flex>\n                    <label>Текст</label>\n                    <textarea ng-model="nfdCtrl.feedback.text"\n                              columns="1"\n                              md-maxlength="500"\n                              rows="6"\n                              name="text"\n                              required>\n                    </textarea>\n                    <div class="pb-input-hint">Введите Ваше сообщение</div>\n                    <div ng-messages="newFeedbackForm.text.$error">\n                        <div ng-message="required">Поле не может быть пустым!</div>\n                        <div ng-message="md-maxlength">Убедитесь, что в этом поле не больше 500 символов</div>\n                    </div>\n                </md-input-container>\n            </form>\n        </md-dialog-content>\n\n        <md-dialog-actions layout-padding>\n            <md-button ng-click="nfdCtrl.cancel()"\n                       class="md-raised"\n                       aria-label="Cancel">\n                Отмена\n            </md-button>\n            <md-button ng-click="nfdCtrl.send()"\n                       ng-disabled="!(nfdCtrl.feedback.sender && nfdCtrl.feedback.text)"\n                       class="md-raised md-primary"\n                       aria-label="Send">\n                Отправить\n            </md-button>\n        </md-dialog-action>\n    </md-dialog>\n</script>\n\n</div>\n')}]);
angular.module("pbApp.layout").run(["$templateCache",function(n){n.put("menu.directive.html",'<div>\n    <md-button class="md-icon-button" aria-label="Menu" ng-click="menu.openMenu()">\n        <md-icon>menu</md-icon>\n    </md-button>\n\n    <md-sidenav class="md-sidenav-left md-whiteframe-z2 pb-fixed"\n                md-component-id="left-menu">\n        <div layout="column">\n            <div layout="row" layout-padding>\n                <h3 class="pb-text-muted">Меню</h3>\n                <span flex></span>\n                <md-button class="md-icon-button" ng-click="menu.closeMenu()" aria-labe="Close Menu">\n                    <md-icon style="color: gray;">keyboard_arrow_left</md-icon>\n                </md-button>\n            </div>\n            <md-divider></md-divider>\n            <md-content>\n                <md-list>\n                    <md-list-item ng-repeat="page in menu.pages"\n                                  ng-href="/#/{{ page.url }}">\n                        <md-icon class="pb-text-muted" style="color: grey;">{{ page.icon }}</md-icon>\n                        <p class="md-body-1 pb-text-muted">{{ page.name }}</p>\n                    </md-list-item>\n                </md-list>\n            </md-content>\n\n            <div class="pb-menu-copyright">\n                <p class="md-caption pb-text-muted">Алексей Маслаков, 2016</p>\n            </div>\n        </div>\n    </md-sidenav>\n</div>\n')}]);
//# sourceMappingURL=data:application/json;base64,
